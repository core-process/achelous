#!/bin/bash

### BEGIN INIT INFO
# Provides:          achelous-upstream
# Required-Start:    $local_fs $network
# Required-Stop:     $local_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Achelous Upstream
### END INIT INFO

# Using the lsb functions to perform the operations
. /lib/lsb/init-functions

# Process name (for display)
NAME=achelous-upstream

# Daemon name, where is the actual executable
DAEMON=/usr/sbin/achelous-upstream

# Pid file for the daemon
PIDFILE=/var/run/achelous-upstream.pid

# If the daemon is not there, then exit
test -x $DAEMON || exit 5

case $1 in
	start)
		# Checked the PID file exists and check the actual status of process
		if [ -e $PIDFILE ]; then
			status_of_proc -p $PIDFILE $DAEMON "$NAME process" && status="0" || status="$?"
			# If the status is SUCCESS then don't need to start again.
			if [ $status = "0" ]; then
				exit # Exit
			fi
		fi
		# Start the daemon
		log_daemon_msg "Starting the process" "$NAME"
		# Start the daemon and log the message appropriately
		if $DAEMON start ; then
			log_end_msg 0
		else
			log_end_msg 1
		fi
		;;
	stop)
		# Stop the daemon
		if [ -e $PIDFILE ]; then
			status_of_proc -p $PIDFILE $DAEMON "Stoppping the $NAME process" && status="0" || status="$?"
			if [ "$status" = 0 ]; then
				$DAEMON stop
			fi
		else
			log_daemon_msg "$NAME process is not running"
			log_end_msg 0
		fi
		;;
	restart)
		# Restart the daemon
		$0 stop && sleep 2 && $0 start
		;;
	reload|force-reload)
		# No op, daemon reloads configuration regularely
		log_success_msg "$NAME process reloaded successfully"
		;;
	status)
		# Check the status of the process.
		if [ -e $PIDFILE ]; then
			status_of_proc -p $PIDFILE $DAEMON "$NAME process" && exit 0 || exit $?
		else
			log_daemon_msg "$NAME process is not running"
			log_end_msg 0
		fi
		;;
	trigger)
		# Trigger queue processing
		if [ -e $PIDFILE ]; then
			$DAEMON trigger
			log_success_msg "$NAME queue run triggered successfully"
		else
			log_failure_msg "$PIDFILE does not exists"
		fi
		;;
	*)
		# For invalid arguments, print the usage message
		echo "Usage: $0 {start|stop|restart|reload|force-reload|status|trigger}"
		exit 2
		;;
esac
